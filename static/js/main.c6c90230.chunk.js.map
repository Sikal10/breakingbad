{"version":3,"sources":["img/logo.png","img/spinner.gif","components/ui/header.jsx","components/characters/characteritem.jsx","components/ui/spinner.jsx","components/characters/characterGrid.jsx","components/ui/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CharacterItem","item","img","name","portrayed","nickname","birthday","status","Spinner","spinner","style","width","margin","display","CharacterGrid","items","isLoading","map","key","char_id","Search","placeholder","handleChange","action","type","onChange","autoFocus","App","useState","characters","setCharacters","setIsLoading","searchField","setSearchField","useEffect","a","Axios","result","users","data","fetchItems","filteredCharacters","filter","character","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,0NCc5BC,EAXA,WACX,OACI,4BAAQC,UAAW,UACf,yBAAKC,IAAKC,IAAMC,IAAK,O,iBCyBlBC,EA7BO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKI,EAAKC,IAAKH,IAAI,MAE5B,yBAAKH,UAAU,aACX,4BAAKK,EAAKE,MACV,4BACI,4BACI,+CADJ,IACkCF,EAAKG,WAEvC,4BACI,6CADJ,IACgCH,EAAKI,UAErC,4BACI,6CADJ,IACgCJ,EAAKK,UAErC,4BACI,2CADJ,IAC8BL,EAAKM,a,iBCb5CC,EANC,WACZ,OACG,yBAAKT,IAAK,GAAIF,IAAKY,IAASC,MAAO,CAACC,MAAO,QAASC,OAAQ,OAAQC,QAAS,QAASd,IAAK,cCOnFe,EARO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MACpB,OAD0C,EAAfC,UACP,kBAAC,EAAD,MAAgB,6BAASpB,UAAW,SACnDmB,EAAME,KAAI,SAAAhB,GAAI,OACX,kBAAC,EAAD,CAAeiB,IAAKjB,EAAKkB,QAASlB,KAAMA,SCarCmB,EAlBA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAE1B,OACI,6BAAS1B,UAAW,UAChB,0BAAM2B,OAAO,IACT,2BACIC,KAAK,OACLC,SAAUH,EACV1B,UAAW,eACXyB,YAAaA,EACbK,WAAS,OC8BdC,EAnCH,WAAO,IAAD,EAEsBC,mBAAS,IAF/B,mBAEPC,EAFO,KAEKC,EAFL,OAGoBF,oBAAS,GAH7B,mBAGPZ,EAHO,KAGIe,EAHJ,OAIwBH,mBAAS,IAJjC,mBAIPI,EAJO,KAIMC,EAJN,KAMdC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEACMC,IAAM,iDADZ,OACTC,EADS,OAETC,EAAQD,EAAOE,KAErBT,EAAcQ,GACdP,GAAa,GALE,2CAAH,qDAShBS,KAED,CAACR,IAEJ,IAAMS,EAAqBZ,EAAWa,QAAO,SAAAC,GAAS,OAAIA,EAAUxC,KAAKyC,cAAcC,SAASb,EAAYY,kBAK5G,OACI,yBAAKhD,UAAW,aACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQyB,YAAa,oBAAqBC,aAN7B,SAAAwB,GAAC,OAAIb,EAAea,EAAEC,OAAOC,UAO1C,kBAAC,EAAD,CAAehC,UAAWA,EAAWD,MAAO0B,MCxBpCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6c90230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from \"react\";\r\nimport logo from '../../img/logo.png';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={'center'}>\r\n            <img src={logo} alt={''} />\r\n\r\n        </header>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst CharacterItem = ({ item }) => {\r\n    return (\r\n        <div className='card'>\r\n            <div className='card-inner'>\r\n                <div className='card-front'>\r\n                    <img src={item.img} alt='' />\r\n                </div>\r\n                <div className='card-back'>\r\n                    <h1>{item.name}</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Actor Name:</strong> {item.portrayed}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Nickname:</strong> {item.nickname}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Birthday:</strong> {item.birthday}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Status:</strong> {item.status}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterItem\r\n","import React from \"react\";\r\nimport spinner from '../../img/spinner.gif'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n       <img alt={''} src={spinner} style={{width: '200px', margin: 'auto', display: 'block', alt: 'Loading'}} />\r\n    )\r\n};\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport CharacterItem from \"./characteritem\";\r\nimport Spinner from \"../ui/spinner\";\r\n\r\nconst CharacterGrid = ({items, isLoading}) => {\r\n    return isLoading ? (<Spinner />) : (<section className={'cards'}>\r\n        {items.map(item => (\r\n            <CharacterItem key={item.char_id} item={item}></CharacterItem>\r\n        ))}\r\n    </section>)\r\n}\r\n\r\nexport default CharacterGrid;","import React from \"react\";\r\n\r\nconst Search = ({placeholder, handleChange}) => {\r\n\r\n    return (\r\n        <section className={'search'}>\r\n            <form action=\"\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={handleChange}\r\n                    className={'form-control'}\r\n                    placeholder={placeholder}\r\n                    autoFocus\r\n                />\r\n            </form>\r\n        </section>\r\n    )\r\n\r\n};\r\n\r\nexport default Search;\r\n\r\n// const Search = ({getQuery}) => {\r\n//     const [text, setText] = useState('');\r\n//\r\n//     const onChange = (q) => {\r\n//         setText(q)\r\n//         getQuery(q);\r\n//     }\r\n//\r\n//     return (\r\n//         <section className={'search'}>\r\n//             <form action=\"\">\r\n//                 <input type=\"text\" value={text} onChange={e => {onChange(e.target.value)}} className={'form-control'} placeholder={'Search Characters'} autoFocus/>\r\n//             </form>\r\n//         </section>\r\n//     )\r\n//\r\n// };\r\n//\r\n// export default Search;","import React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\nimport Header from \"./components/ui/header\";\r\nimport Axios from \"axios\";\r\nimport CharacterGrid from \"./components/characters/characterGrid\";\r\nimport Search from \"./components/ui/Search\";\r\n\r\nconst App = () => {\r\n\r\n    const [characters, setCharacters] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [searchField, setSearchField] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchItems = async  () => {\r\n            const result = await Axios(`https://www.breakingbadapi.com/api/characters`);\r\n            const users = result.data\r\n\r\n            setCharacters(users)\r\n            setIsLoading(false);\r\n\r\n        }\r\n\r\n        fetchItems();\r\n\r\n    }, [searchField])\r\n\r\n    const filteredCharacters = characters.filter(character => character.name.toLowerCase().includes(searchField.toLowerCase()))\r\n\r\n    const handleChange = e => setSearchField(e.target.value)\r\n\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <Header />\r\n            <Search placeholder={'Search Characters'} handleChange={handleChange} />\r\n            <CharacterGrid isLoading={isLoading} items={filteredCharacters} />\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}